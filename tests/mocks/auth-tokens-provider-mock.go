// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/providers/auth-tokens-provider.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/providers/auth-tokens-provider.go -destination=tests/mocks/auth-tokens-provider-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-ecommerce/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthTokensProvider is a mock of AuthTokensProvider interface.
type MockAuthTokensProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokensProviderMockRecorder
}

// MockAuthTokensProviderMockRecorder is the mock recorder for MockAuthTokensProvider.
type MockAuthTokensProviderMockRecorder struct {
	mock *MockAuthTokensProvider
}

// NewMockAuthTokensProvider creates a new mock instance.
func NewMockAuthTokensProvider(ctrl *gomock.Controller) *MockAuthTokensProvider {
	mock := &MockAuthTokensProvider{ctrl: ctrl}
	mock.recorder = &MockAuthTokensProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokensProvider) EXPECT() *MockAuthTokensProviderMockRecorder {
	return m.recorder
}

// GenerateAuthTokens mocks base method.
func (m *MockAuthTokensProvider) GenerateAuthTokens(accountId string) (string, string, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthTokens", accountId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(errors.AppErr)
	return ret0, ret1, ret2
}

// GenerateAuthTokens indicates an expected call of GenerateAuthTokens.
func (mr *MockAuthTokensProviderMockRecorder) GenerateAuthTokens(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthTokens", reflect.TypeOf((*MockAuthTokensProvider)(nil).GenerateAuthTokens), accountId)
}

// ValidateJWTToken mocks base method.
func (m *MockAuthTokensProvider) ValidateJWTToken(token string) (string, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWTToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(errors.AppErr)
	return ret0, ret1
}

// ValidateJWTToken indicates an expected call of ValidateJWTToken.
func (mr *MockAuthTokensProviderMockRecorder) ValidateJWTToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWTToken", reflect.TypeOf((*MockAuthTokensProvider)(nil).ValidateJWTToken), token)
}
