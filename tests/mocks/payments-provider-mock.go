// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/providers/payments-provider.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/providers/payments-provider.go -destination=tests/mocks/payments-provider-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-ecommerce/internal/app/errors"
	models "github.com/henrique998/go-ecommerce/internal/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCommerceProvider is a mock of CommerceProvider interface.
type MockCommerceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCommerceProviderMockRecorder
}

// MockCommerceProviderMockRecorder is the mock recorder for MockCommerceProvider.
type MockCommerceProviderMockRecorder struct {
	mock *MockCommerceProvider
}

// NewMockCommerceProvider creates a new mock instance.
func NewMockCommerceProvider(ctrl *gomock.Controller) *MockCommerceProvider {
	mock := &MockCommerceProvider{ctrl: ctrl}
	mock.recorder = &MockCommerceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommerceProvider) EXPECT() *MockCommerceProviderMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockCommerceProvider) CreateProduct(product models.Product) errors.AppErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(errors.AppErr)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockCommerceProviderMockRecorder) CreateProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockCommerceProvider)(nil).CreateProduct), product)
}
