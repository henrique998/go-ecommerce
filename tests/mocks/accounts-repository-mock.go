// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repositories/accounts-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repositories/accounts-repository.go -destination=tests/mocks/accounts-repository-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/henrique998/go-ecommerce/internal/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountsRepository is a mock of AccountsRepository interface.
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository.
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance.
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountsRepository) Create(a models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountsRepositoryMockRecorder) Create(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsRepository)(nil).Create), a)
}

// FindByEmail mocks base method.
func (m *MockAccountsRepository) FindByEmail(email string) models.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(models.Account)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAccountsRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAccountsRepository)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockAccountsRepository) FindById(accountId string) models.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", accountId)
	ret0, _ := ret[0].(models.Account)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockAccountsRepositoryMockRecorder) FindById(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAccountsRepository)(nil).FindById), accountId)
}

// Update mocks base method.
func (m *MockAccountsRepository) Update(a models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountsRepositoryMockRecorder) Update(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountsRepository)(nil).Update), a)
}
