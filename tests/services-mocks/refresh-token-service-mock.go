// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/session-services-interfaces/refresh-token-service.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/session-services-interfaces/refresh-token-service.go -destination=tests/services-mocks/refresh-token-service-mock.go -package=servicesmocks
//

// Package servicesmocks is a generated GoMock package.
package servicesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-ecommerce/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockRefreshTokenService is a mock of RefreshTokenService interface.
type MockRefreshTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenServiceMockRecorder
}

// MockRefreshTokenServiceMockRecorder is the mock recorder for MockRefreshTokenService.
type MockRefreshTokenServiceMockRecorder struct {
	mock *MockRefreshTokenService
}

// NewMockRefreshTokenService creates a new mock instance.
func NewMockRefreshTokenService(ctrl *gomock.Controller) *MockRefreshTokenService {
	mock := &MockRefreshTokenService{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenService) EXPECT() *MockRefreshTokenServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRefreshTokenService) Execute(refreshTokenStr string) (string, string, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", refreshTokenStr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(errors.AppErr)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockRefreshTokenServiceMockRecorder) Execute(refreshTokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRefreshTokenService)(nil).Execute), refreshTokenStr)
}
