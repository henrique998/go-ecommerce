// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/session-services-interfaces/login-service.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/services/session-services-interfaces/login-service.go -destination=tests/services-mocks/login-service-mock.go -package=servicesmocks
//

// Package servicesmocks is a generated GoMock package.
package servicesmocks

import (
	reflect "reflect"

	errors "github.com/henrique998/go-ecommerce/internal/app/errors"
	requests "github.com/henrique998/go-ecommerce/internal/app/requests"
	gomock "go.uber.org/mock/gomock"
)

// MockLoginService is a mock of LoginService interface.
type MockLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginServiceMockRecorder
}

// MockLoginServiceMockRecorder is the mock recorder for MockLoginService.
type MockLoginServiceMockRecorder struct {
	mock *MockLoginService
}

// NewMockLoginService creates a new mock instance.
func NewMockLoginService(ctrl *gomock.Controller) *MockLoginService {
	mock := &MockLoginService{ctrl: ctrl}
	mock.recorder = &MockLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginService) EXPECT() *MockLoginServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockLoginService) Execute(req requests.LoginRequest) (string, string, errors.AppErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(errors.AppErr)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockLoginServiceMockRecorder) Execute(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockLoginService)(nil).Execute), req)
}
